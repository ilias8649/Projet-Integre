import openai
from rapidfuzz import fuzz

OPENAI_API_KEY = "YOUR_OPENAI_API_KEY"

def extract_titles(blocks, seen_titles, threshold):
    final_blocks = []
    titles_found = set()
    
    seen_titles_lower = set(t.lower() for t in seen_titles)
    
    
    print(f"Extraction √† partir de {len(blocks)} blocks, {len(seen_titles)} titres d√©j√† vus, threshold={threshold}")
    
    for block in blocks:
        lines = [l.strip() for l in block.strip().split("\n") if l.strip()]
        reasoning = ""
        title = ""
        description = ""
        why = ""
        for l in lines:
            if l.lower().startswith("raisonnement :"):
                reasoning = l.split(":", 1)[1].strip()
            elif l.lower().startswith("titre :"):
                title = l.split(":", 1)[1].strip()
            elif l.lower().startswith("description :"):
                description = l.split(":", 1)[1].strip()
            elif l.lower().startswith("pourquoi :"):
                why = l.split(":", 1)[1].strip()
        if not title:
            continue
            
        title_lower = title.strip().lower()
        
        
        duplicate_found = False
        similar_title = None
        max_similarity = 0
        
        
        if title_lower in seen_titles_lower:
            print(f"‚ùå Titre exact d√©j√† vu: '{title}'")
            continue
            
        
        for seen in seen_titles_lower:
            similarity = fuzz.ratio(title_lower, seen)
            if similarity > max_similarity:
                max_similarity = similarity
                similar_title = seen
                
            if similarity >= threshold:
                duplicate_found = True
                print(f"‚ùå Titre similaire trouv√©: '{title}' est similaire √† '{seen}' √† {similarity}%")
                break
                
        if duplicate_found:
            continue
            
        
        if title_lower in titles_found:
            print(f"‚ùå Titre d√©j√† recommand√© dans cette session: '{title}'")
            continue
            
        print(f"‚úÖ Titre accept√©: '{title}' (similarit√© max: {max_similarity}% avec '{similar_title}')")
        titles_found.add(title_lower)
        final_blocks.append({
            "raisonnement": reasoning,
            "titre": title,  
            "description": description,
            "pourquoi": why
        })
        if len(final_blocks) == 3:
            break
    
    print(f"Extraction termin√©e: {len(final_blocks)} titres accept√©s")
    return final_blocks

def generate_recommendations(user_profile, seen_titles):
    name = user_profile['name']
    genres = ", ".join(user_profile['genres'])
    favourites = ", ".join(user_profile['favourites'])
    threshold = 80  

    base_prompt = f"""
    Tu es un expert en anim√©s avec une connaissance approfondie de MyAnimeList et AniList.

    Voici le profil de l'utilisateur {name} :
    - Genres pr√©f√©r√©s : {genres}
    - Anim√©s favoris (√† ne pas recommander, car d√©j√† vus ou explicitement list√©s comme favoris) : {favourites}

    Recommande exactement 3 anim√©s diff√©rents et non vus par {name}.
    Pour chaque recommandation :

    1.  **Raisonnement CoT (Chain-of-Thought) d√©taill√©** :
        Explique clairement ta logique √©tape par √©tape.
        a.  Comment cette recommandation se connecte-t-elle sp√©cifiquement aux genres pr√©f√©r√©s de {name} ({genres}) ? Sois pr√©cis.
        b.  En quoi cette recommandation est-elle distincte et compl√©mentaire par rapport aux anim√©s favoris de {name} ({favourites}) ? Souligne la nouveaut√© ou l'angle diff√©rent qu'elle apporte.
        c.  Quel est ton processus de pens√©e pour arriver √† cette suggestion ? (Par exemple : "L'utilisateur aime X et Y, et son favori Z a telle caract√©ristique. Je cherche donc un anim√© qui combine X ou Y avec une caract√©ristique A ou B, tout en √©tant diff√©rent de Z sur l'aspect C.")

    2.  Pr√©sente ensuite la recommandation en respectant scrupuleusement le format suivant :

    ---
    Raisonnement : <Ton explication d√©taill√©e issue de l'√©tape 1. Ce texte doit refl√©ter ton processus de pens√©e CoT et √™tre sp√©cifique au profil de {name}.>
    Titre : <Nom de l'anim√©>
    Description : <1 phrase concise et accrocheuse r√©sumant l'anim√©.>
    Pourquoi : <1-2 phrases additionnelles qui renforcent la recommandation, en soulignant par exemple un aspect unique, une qualit√© reconnue (animation, musique, originalit√© du sc√©nario) ou un attrait particulier pour {name} qui n'a pas √©t√© enti√®rement couvert dans le raisonnement principal.>
    ---

    **Exemple illustratif de la structure attendue pour UNE recommandation (le contenu doit √™tre adapt√© au profil r√©el de {name}) :**
    ---
    Raisonnement : L'utilisateur {name} appr√©cie les genres 'Aventure' et 'Fantaisie'. Son anim√© favori 'Favori Alpha' est une √©pop√©e avec un vaste monde. Je propose 'Nouvelle Aventure √âpique' car il partage le genre 'Aventure' et l'exploration d'un monde riche, mais se distingue par un syst√®me de magie original et une ambiance plus sombre, offrant une variation par rapport √† 'Favori Alpha'. Mon processus a √©t√© de chercher un anim√© d'aventure fantastique bien not√©, qui ne soit pas 'Favori Alpha', et qui introduise un √©l√©ment distinctif.
    Titre : Nouvelle Aventure √âpique
    Description : Un h√©ros improbable se lance dans une qu√™te p√©rilleuse pour sauver son royaume d'une ancienne mal√©diction.
    Pourquoi : Cet anim√© est acclam√© pour la complexit√© de ses personnages secondaires et la bande originale immersive qui amplifie chaque sc√®ne d'action.
    ---

    ‚ö†Ô∏è Le champ "Titre :" doit imp√©rativement appara√Ætre pour chaque anim√©. Ne saute jamais ce champ.
    Sois structur√©, pertinent et engageant.
    Termine ta r√©ponse globale par une phrase concise r√©sumant ta strat√©gie de s√©lection pour l'ensemble des 3 recommandations.
    """

    try:
        client = openai.OpenAI(api_key=OPENAI_API_KEY)
        attempts = 0
        all_blocks = []
        all_titles = set()
        prompt = base_prompt

        while attempts < 3 and len(all_blocks) < 3:
            response = client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[{"role": "user", "content": prompt}],
                temperature=0.7,
                max_tokens=1000
            )
            full_text = response.choices[0].message.content.strip()
            blocks = [b for b in full_text.split("---") if "Titre" in b]
            new_blocks = extract_titles(blocks, seen_titles | all_titles, threshold)
            for block in new_blocks:
                
                all_titles.add(block["titre"])
            all_blocks.extend(new_blocks)
            attempts += 1
            
            if len(all_blocks) < 3:
                prompt = base_prompt + f"\nNe propose pas ces titres : {', '.join(list(seen_titles | all_titles))}"

        if len(all_blocks) < 3:
            return (
                f"‚ö†Ô∏è Seulement {len(all_blocks)} recommandation(s) valides apr√®s {attempts} tentatives :\n\n" +
                "\n\n---\n\n".join([
                    f"Raisonnement : {block['raisonnement']}\nTitre : {block['titre']}\nDescription : {block['description']}\nPourquoi : {block['pourquoi']}"
                    for block in all_blocks
                ]) +
                "\n\nüîÅ Essaye d‚Äô√©largir les crit√®res ou de reformuler la demande."
            )

        return "\n\n---\n\n".join([
            f"Raisonnement : {block['raisonnement']}\nTitre : {block['titre']}\nDescription : {block['description']}\nPourquoi : {block['pourquoi']}"
            for block in all_blocks[:3]
        ])

    except Exception as e:
        return f"‚ùå Erreur OpenAI : {str(e)}"

def start_clarification_conversation(user_profile):
    """D√©marre une conversation de clarification avec l'utilisateur"""
    
    name = user_profile['name']
    genres = ", ".join(user_profile['genres'])
    favourites = ", ".join(user_profile['favourites'])

    prompt = f"""
    Tu es un assistant sp√©cialis√© en recommandations d'anim√©s qui pose des questions pour mieux comprendre les go√ªts de {name}.
    
    Tu as d√©j√† ces informations :
    - Genres pr√©f√©r√©s : {genres}
    - Anim√©s favoris : {favourites}
    
    IMPORTANT: 
    1. Sois tr√®s concis. Limite ta r√©ponse √† 3-4 phrases maximum. Ton message ne doit pas d√©passer 3 lignes.
    2. Ne recommande JAMAIS d'anim√©s sp√©cifiques pendant cette conversation. Tu ne dois PAS mentionner de titres d'anim√©s.
    3. Ton r√¥le est uniquement de poser des questions pour comprendre les pr√©f√©rences.
    
    Pr√©sente-toi en une phrase puis pose 1-2 questions cibl√©es pour mieux cerner ses pr√©f√©rences actuelles.
    Choisis parmi ces sujets:
    - √âl√©ments sp√©cifiques appr√©ci√©s (ambiance, animation, personnages)
    - Recherche de similitudes ou nouveaut√©s par rapport aux favoris
    - Dur√©e pr√©f√©r√©e (s√©ries courtes/longues)
    - Genres √† √©viter

    Ton message doit √™tre court, direct et amical.
    """
    
    try:
        client = openai.OpenAI(api_key=OPENAI_API_KEY)
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "system", "content": prompt}],
            temperature=0.7,
            max_tokens=150  
        )
        return response.choices[0].message.content
    except Exception as e:
        return "Salut ! Pour affiner mes recommandations, pr√©f√®res-tu des s√©ries longues ou courtes ? Y a-t-il des genres √† √©viter ?"

def continue_clarification_conversation(conversation, user_input, user_profile):
    """Continue la conversation avec l'utilisateur en fonction de sa r√©ponse"""
    
    name = user_profile['name']
    genres = ", ".join(user_profile['genres'])
    favourites = ", ".join(user_profile['favourites'])
    
    system_prompt = f"""
    Tu es un assistant sp√©cialis√© en recommandations d'anim√©s qui aide {name} √† clarifier ses pr√©f√©rences.
    
    Tu connais d√©j√† ces informations sur {name} :
    - Genres pr√©f√©r√©s : {genres}
    - Anim√©s favoris : {favourites}
    
    IMPORTANT:
    1. Sois extr√™mement concis. Limite tes r√©ponses √† 2-4 phrases maximum.
    2. Ne fais pas de longs paragraphes ou d'explications d√©taill√©es.
    3. Ne recommande AUCUN anim√© sp√©cifique dans ta r√©ponse. N'√©voque pas de titres pr√©cis.
    4. Apr√®s 2 √©changes, conclue la conversation avec une phrase de r√©sum√© tr√®s courte.
    5. √Ä la fin de ton dernier message, inclus exactement cette phrase: "Je pense que j'en sais assez pour te recommander des anim√©s"
    
    Ton objectif est de recueillir des informations essentielles de mani√®re efficace, pas d'avoir une longue conversation ni de sugg√©rer des titres.
    Si l'utilisateur te demande des recommandations, rappelle-lui poliment que tu collectes d'abord ses pr√©f√©rences et que tu lui proposeras des recommandations une fois la conversation termin√©e.
    """
    
    
    messages = [{"role": "system", "content": system_prompt}]
    
    for msg in conversation:
        messages.append({"role": msg["role"], "content": msg["content"]})
    
    
    messages.append({"role": "user", "content": user_input})
    
    
    conversation_length = sum(1 for msg in conversation if msg["role"] == "user")
    if conversation_length >= 2:
        messages.append({"role": "system", "content": "C'est le moment de conclure. Fais un r√©sum√© tr√®s court (1-2 phrases) de ce que tu as appris sur les pr√©f√©rences de l'utilisateur, sans recommander d'anim√©s. Termine par la phrase de conclusion."})
    
    try:
        client = openai.OpenAI(api_key=OPENAI_API_KEY)
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=messages,
            temperature=0.7,
            max_tokens=200  
        )
        return response.choices[0].message.content
    except Exception as e:
        return "Merci pour ces pr√©cisions ! Je pense que j'en sais assez pour te recommander des anim√©s maintenant."

def generate_refined_recommendations(conversation, user_profile, seen_titles):
    """G√©n√®re des recommandations affin√©es bas√©es sur la conversation"""
    
    name = user_profile['name']
    genres = ", ".join(user_profile['genres'])
    favourites = ", ".join(user_profile['favourites'])
    threshold = 75  
    
    
    conversation_text = "\n".join([f"{msg['role']}: {msg['content']}" for msg in conversation])
    
    
    example_seen = list(seen_titles)[:5] if len(seen_titles) >= 5 else list(seen_titles)
    
    refined_prompt = f"""
    Tu es un expert en anim√©s avec une connaissance approfondie de MyAnimeList et AniList.

    Voici le profil de l'utilisateur {name} :
    - Genres pr√©f√©r√©s : {genres}
    - Anim√©s favoris (√† ne pas recommander) : {favourites}
    
    IMPORTANT: L'utilisateur a d√©j√† vu de nombreux anim√©s dont voici quelques exemples : {', '.join(example_seen)}
    
    De plus, vous avez eu cette conversation pour clarifier les pr√©f√©rences :
    
    {conversation_text}

    Recommande exactement 3 anim√©s diff√©rents et non vus par {name}.
    Pour chaque recommandation :

    1.  **Raisonnement CoT (Chain-of-Thought) d√©taill√©** :
        Explique clairement ta logique √©tape par √©tape.
        a.  Comment cette recommandation se connecte-t-elle sp√©cifiquement aux genres pr√©f√©r√©s de {name} ({genres}) ?
        b.  En quoi cette recommandation r√©pond-elle aux pr√©f√©rences exprim√©es dans la conversation ?
        c.  Comment as-tu pris en compte les clarifications donn√©es par l'utilisateur pour arriver √† cette suggestion ?

    2.  Pr√©sente ensuite la recommandation en respectant scrupuleusement le format suivant :

    ---
    Raisonnement : <Ton explication d√©taill√©e issue de l'√©tape 1. Ce texte doit refl√©ter ton processus de pens√©e CoT et √™tre sp√©cifique aux pr√©f√©rences affin√©es de {name}.>
    Titre : <Nom de l'anim√©>
    Description : <1 phrase concise et accrocheuse r√©sumant l'anim√©.>
    Pourquoi : <1-2 phrases additionnelles qui renforcent la recommandation, en soulignant un aspect particuli√®rement pertinent par rapport aux pr√©f√©rences affin√©es de l'utilisateur.>
    ---

    **Exemple illustratif de la structure attendue pour UNE recommandation (le contenu doit √™tre adapt√© au profil et √† la conversation) :**
    ---
    Raisonnement : L'utilisateur {name} a mentionn√© dans la conversation qu'il/elle pr√©f√®re les s√©ries courtes avec une ambiance sombre mais pas d√©primante. Ses genres pr√©f√©r√©s incluent 'Thriller' et 'Myst√®re'. Je propose 'Titre d'Exemple' car c'est une s√©rie de 12 √©pisodes avec une esth√©tique sombre et une intrigue captivante. Ce n'est pas simplement un thriller standard, mais il int√®gre des √©l√©ments de myst√®re psychologique qui correspondent √† ce que l'utilisateur recherche, tout en restant diff√©rent de ses favoris actuels.
    Titre : Titre d'Exemple
    Description : Un d√©tective au pass√© trouble se retrouve plong√© dans une affaire qui r√©v√®le des secrets bien plus profonds que pr√©vus.
    Pourquoi : La s√©rie se d√©marque par sa narration non-lin√©aire et ses touches d'humour noir qui all√®gent l'atmosph√®re, exactement ce que l'utilisateur a d√©crit comme son √©quilibre id√©al.
    ---

    ‚ö†Ô∏è Le champ "Titre :" doit imp√©rativement appara√Ætre pour chaque anim√©. Ne saute jamais ce champ.
    ‚ö†Ô∏è Ne recommande PAS d'anim√©s que l'utilisateur a d√©j√† vus ou mentionn√©s comme favoris.
    ‚ö†Ô∏è Assure-toi que tes recommandations sont distinctes et parfaitement adapt√©es aux pr√©f√©rences exprim√©es dans la conversation.
    
    Sois structur√©, pertinent et engageant.
    Termine ta r√©ponse globale par une phrase concise expliquant comment tes recommandations r√©pondent sp√©cifiquement aux pr√©f√©rences affin√©es de l'utilisateur.
    """
    
    
    try:
        client = openai.OpenAI(api_key=OPENAI_API_KEY)
        attempts = 0
        all_blocks = []
        all_titles = set()
        prompt = refined_prompt
        temperatures = [0.7, 0.8, 0.9]  

        while attempts < 5 and len(all_blocks) < 3:  
            
            current_temp = temperatures[min(attempts, len(temperatures)-1)]
            
            response = client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {"role": "system", "content": "Tu es un expert en anim√©s qui recommande des titres originaux et peu connus"},
                    {"role": "user", "content": prompt}
                ],
                temperature=current_temp,
                max_tokens=1200  
            )
            full_text = response.choices[0].message.content.strip()
            blocks = [b for b in full_text.split("---") if "Titre" in b]
            
            
            new_blocks = extract_titles(blocks, seen_titles | all_titles, threshold)
            
            for block in new_blocks:
                all_titles.add(block["titre"].lower())
            all_blocks.extend(new_blocks)
            attempts += 1
            
            
            if len(all_blocks) < 3:
                rejected_titles = list(all_titles)
                prompt = refined_prompt + f"""
                NOUVELLE TENTATIVE N√âCESSAIRE:
                - Tu as d√©j√† sugg√©r√© ces titres qui ne conviennent pas: {', '.join(rejected_titles)}
                - Propose des titres COMPL√àTEMENT DIFF√âRENTS et moins connus
                - Concentre-toi sur des anime sortis entre 2010 et 2022 qui correspondent aux pr√©f√©rences
                - Cherche des p√©pites m√©connues du grand public mais appr√©ci√©es par les critiques
                - √âvite ABSOLUMENT les grands classiques et les anime ultra-populaires
                """

        
        if len(all_blocks) < 3 and attempts >= 5:
            
            threshold = 65  
            prompt = refined_prompt + """
            ASSOUPLISSEMENT DES CRIT√àRES:
            - Nous avons besoin de recommandations vraiment originales
            - N'h√©site pas √† sugg√©rer des anime moins connus ou des ≈ìuvres de niche
            - L'important est de respecter les th√®mes et pr√©f√©rences mentionn√©s dans la conversation
            - Utilise des anime de TOUTES les p√©riodes (ann√©es 90, 2000, 2010, 2020)
            - Respecte SCRUPULEUSEMENT le format demand√© avec le champ "Titre :" bien identifiable
            """
            
            response = client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[{"role": "system", "content": "Tu es un expert en recommandations d'anime originaux et peu connus."},
                           {"role": "user", "content": prompt}],
                temperature=1.0,  
                max_tokens=1200
            )
            full_text = response.choices[0].message.content.strip()
            blocks = [b for b in full_text.split("---") if "Titre" in b]
            new_blocks = extract_titles(blocks, seen_titles | all_titles, threshold)
            all_blocks.extend(new_blocks)

        
        if len(all_blocks) == 0:
            return """
            ‚ö†Ô∏è Je n'ai pas pu g√©n√©rer de recommandations qui correspondent √† la fois √† vos pr√©f√©rences ET qui ne sont pas similaires √† ce que vous avez d√©j√† vu.
            
            Suggestions :
            1. Essayez de pr√©ciser des genres ou th√®mes diff√©rents de ce que vous avez l'habitude de regarder
            2. Demandez explicitement des recommandations pour d√©couvrir de nouveaux genres
            3. Mentionnez si vous √™tes ouvert √† des anime plus anciens ou plus r√©cents
            
            Vous pouvez relancer une conversation pour affiner vos pr√©f√©rences diff√©remment.
            """

        return "\n\n---\n\n".join([
            f"Raisonnement : {block['raisonnement']}\nTitre : {block['titre']}\nDescription : {block['description']}\nPourquoi : {block['pourquoi']}"
            for block in all_blocks[:3]
        ])
    except Exception as e:
        return f"‚ùå Erreur lors de la g√©n√©ration des recommandations : {str(e)}"
